#!/usr/bin/env bash
# Pre-commit hook for Orlando transducer library
# Runs formatting, linting, and tests before allowing commits

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç Running pre-commit checks...${NC}\n"

# Check if we're on WASM target (if so, skip native tests)
NATIVE_TARGET="x86_64-unknown-linux-gnu"

# 1. Rustfmt - Code formatting
echo -e "${YELLOW}1. Running rustfmt...${NC}"
if ! cargo fmt --all -- --check; then
    echo -e "${RED}‚ùå Formatting check failed!${NC}"
    echo -e "${YELLOW}üí° Run 'cargo fmt --all' to fix formatting${NC}\n"
    exit 1
fi
echo -e "${GREEN}‚úÖ Formatting check passed${NC}\n"

# 2. Clippy - Linting (Native target)
echo -e "${YELLOW}2a. Running clippy (native)...${NC}"
if ! cargo clippy --all-targets --all-features --target "$NATIVE_TARGET" -- -D warnings; then
    echo -e "${RED}‚ùå Clippy check failed on native target!${NC}"
    echo -e "${YELLOW}üí° Fix clippy warnings before committing${NC}\n"
    exit 1
fi
echo -e "${GREEN}‚úÖ Clippy check passed (native)${NC}\n"

# 2b. Clippy - Linting (WASM target)
echo -e "${YELLOW}2b. Running clippy (wasm32)...${NC}"
if ! cargo clippy --lib --target wasm32-unknown-unknown -- -D warnings; then
    echo -e "${RED}‚ùå Clippy check failed on WASM target!${NC}"
    echo -e "${YELLOW}üí° Fix WASM-specific clippy warnings before committing${NC}\n"
    exit 1
fi
echo -e "${GREEN}‚úÖ Clippy check passed (wasm32)${NC}\n"

# 3. Unit tests
echo -e "${YELLOW}3. Running unit tests...${NC}"
if ! cargo test --lib --target "$NATIVE_TARGET" --quiet; then
    echo -e "${RED}‚ùå Unit tests failed!${NC}"
    echo -e "${YELLOW}üí° Fix failing tests before committing${NC}\n"
    exit 1
fi
echo -e "${GREEN}‚úÖ Unit tests passed${NC}\n"

# 4. Integration tests (quick mode - skip heavy property tests)
echo -e "${YELLOW}4. Running integration tests...${NC}"
if ! cargo test --test integration --target "$NATIVE_TARGET" --quiet; then
    echo -e "${RED}‚ùå Integration tests failed!${NC}"
    echo -e "${YELLOW}üí° Fix failing integration tests before committing${NC}\n"
    exit 1
fi
echo -e "${GREEN}‚úÖ Integration tests passed${NC}\n"

# 5. WASM build check
echo -e "${YELLOW}5. Running WASM build check...${NC}"
if ! cargo build --lib --target wasm32-unknown-unknown --quiet; then
    echo -e "${RED}‚ùå WASM build failed!${NC}"
    echo -e "${YELLOW}üí° Fix WASM build errors before committing${NC}\n"
    exit 1
fi
echo -e "${GREEN}‚úÖ WASM build check passed${NC}\n"

# 6. Native build check
echo -e "${YELLOW}6. Running native build check...${NC}"
if ! cargo build --target "$NATIVE_TARGET" --quiet; then
    echo -e "${RED}‚ùå Native build failed!${NC}"
    echo -e "${YELLOW}üí° Fix build errors before committing${NC}\n"
    exit 1
fi
echo -e "${GREEN}‚úÖ Native build check passed${NC}\n"

echo -e "${GREEN}‚ú® All pre-commit checks passed!${NC}"
echo -e "${BLUE}üìù Proceeding with commit...${NC}\n"

exit 0
