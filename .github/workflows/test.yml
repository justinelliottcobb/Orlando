name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: \${{ matrix.os }}
    strategy:
      matrix:
        # For PRs: only test on Ubuntu + stable
        # For main: test on all platforms and Rust versions
        os: \${{ github.event_name == 'pull_request' && fromJSON('["ubuntu-latest"]') || fromJSON('["ubuntu-latest", "macos-latest", "windows-latest"]') }}
        rust: \${{ github.event_name == 'pull_request' && fromJSON('["stable"]') || fromJSON('["stable", "beta", "nightly"]') }}
        exclude:
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: beta
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: \${{ matrix.rust }}
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: \${{ runner.os }}-cargo-registry-\${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: \${{ runner.os }}-cargo-index-\${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: \${{ runner.os }}-cargo-build-target-\${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run tests (Linux)
        run: cargo test --all-features --target x86_64-unknown-linux-gnu
        if: matrix.os == 'ubuntu-latest'
      
      - name: Run tests (macOS)
        run: cargo test --all-features
        if: matrix.os == 'macos-latest'
      
      - name: Run tests (Windows)
        run: cargo test --all-features
        if: matrix.os == 'windows-latest'

  wasm-test:
    name: WASM Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
      - name: Run WASM tests
        run: wasm-pack test --headless --firefox

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    # Only run coverage on main branch pushes
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      
      - name: Generate coverage
        run: cargo tarpaulin --target x86_64-unknown-linux-gnu --out xml
      
      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./cobertura.xml

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
          targets: wasm32-unknown-unknown
      - run: cargo clippy --all-targets --all-features --target x86_64-unknown-linux-gnu -- -D warnings
      - run: cargo clippy --lib --target wasm32-unknown-unknown -- -D warnings
